var searchIndex = JSON.parse('{\
"clash_doc":{"doc":"","t":"DDMMMLLLLLLMLLMMMLLMMMMMMMLLLMMLLMMMMMMMMMMMMMMMMMMMLLMLLLLMLLMLL","n":["ClashConfigDef","ClashDNSConfigDef","allow_lan","authentication","bind_address","borrow","borrow","borrow_mut","borrow_mut","default","default","default_nameserver","deserialize","deserialize","dns","enable","enhanced_mode","erased_serialize","erased_serialize","experimental","external_controller","external_ui","fake_ip_filter","fake_ip_range","fallback","fallback_filter","from","from","from_str","hosts","interface","into","into","ipv6","ipv6","listen","log_level","mixed_port","mmdb","mmdb_download_url","mode","nameserver","nameserver_policy","port","profile","proxy","proxy_group","proxy_provider","routing_mask","rule","rule_provider","secret","serialize","serialize","socks_port","try_from","try_from","try_into","try_into","tun","type_id","type_id","user_hosts","vzip","vzip"],"q":[[0,"clash_doc"]],"d":["docs for clash Example","DNS client/server settings This section is optional. When …","Allow connections to the local-end server from other LAN …","HTTP and SOCKS5 proxy authentication","The address that the inbound listens on","","","","","","","Default nameservers, used to resolve DoH hostnames","","","DNS client/server settings","When disabled, system DNS config will be used All other …","Whether to use fake IP addresses","","","experimental settings, if any","external controller address","dashboard folder path relative to the $CWD","Fake IP addresses filter","Fake IP addresses pool CIDR","Fallback DNS servers","Fallback DNS filter","Returns the argument unchanged.","Returns the argument unchanged.","","Hosts","outbound interface name","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","these options has default vals, and needs extra processing","When false, response to AAAA questions will be empty","DNS server listening address. If not present, the DNS …","Log level Either <code>debug</code>, <code>info</code>, <code>warning</code>, <code>error</code> or <code>off</code>","The HTTP/SOCKS5 mixed proxy port","Country database path relative to the $CWD","Country database download url","Clash router working mode Either <code>rule</code>, <code>global</code> or <code>direct</code>","DNS servers","Lookup domains via specific nameservers","The HTTP proxy port","Profile settings","Proxy settings","Proxy group settings","proxy provider settings","fwmark on Linux only","Rule settings","rule provider settings","external controller secret","","","The SOCKS5 proxy port","","","","","tun settings","","","Whether to <code>Config::hosts</code> as when resolving hostnames","",""],"i":[0,0,1,1,1,1,2,1,2,1,2,2,1,2,1,2,2,1,2,1,1,1,2,2,2,2,1,2,1,1,1,1,2,1,2,2,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,2,1,1,2,2,1,2],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],[[],1],[[],2],0,[3,[[4,[1]]]],[3,[[4,[2]]]],0,0,0,[5,[[4,[6,7]]]],[5,[[4,[6,7]]]],0,0,0,0,0,0,0,[[]],[[]],[8,[[4,[1]]]],0,0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,9],4],[[2,9],4],0,[[],4],[[],4],[[],4],[[],4],0,[[],10],[[],10],0,[[]],[[]]],"c":[2,33],"p":[[3,"ClashConfigDef"],[3,"ClashDNSConfigDef"],[8,"Deserializer"],[4,"Result"],[8,"Serializer"],[3,"Ok"],[3,"Error"],[15,"str"],[8,"Serializer"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
